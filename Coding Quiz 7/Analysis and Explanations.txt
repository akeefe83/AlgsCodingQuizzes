1. Running Time of Algorithms takes a runtime of O(n^2) to complete, as it completes a simple check of two values within its two for loops. These two loops run a total number of n times, meaning that our total runtime is n * n or n^2.

2. While I was unable to properly implement a dynamically programmed version that solved this question I was able to ensure that a recursively defined problem would solve it. In this case the way the recursion works is that if both the number of ice cream flavors chosen and the total cost is met the number of solutions is returned incremented by one. If the cost has been overshot or the index is less than zero the number of solutions returned is the same as previously calculated, since the number of solutions is an argument passed into the function. If neither of those two conditions is met we instead calculate the number of solutions by exploring both the inclusion of a current flavor and the exclusion of the flavor, adding both of these recursive calls to our current total number of solutions. This allows us to return the correct number of solutions since the final else statement completes this addition and returns the total. I can understand vaguely how I could utilize dynamic programming to shorten this runtime, by storing previously calculated inclusion/exclusion values in a table, however I was unable to do so within the given time.